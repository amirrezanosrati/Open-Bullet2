name: Build and Expose OpenBullet2 (ngrok)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-expose:
    runs-on: ubuntu-latest

    env:
      # می‌توانید نسخه دات‌نت را اینجا تغییر دهید
      DOTNET_VERSION: '8.0'
      APP_PORT: '5000' # پورتی که برنامه به آن گوش می‌دهد
      # اگر محل فایل سلوشن/پروجکت شما متفاوت است، مسیر زیر را تغییر دهید
      SOLUTION_PATH: '.'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore and build
        working-directory: ${{ env.SOLUTION_PATH }}
        run: |
          dotnet restore --verbosity minimal
          dotnet build --configuration Release --no-restore

      - name: Download ngrok
        run: |
          # این اسکریپت نسخه لینوکس amd64 را دانلود می‌کند. در صورت نیاز معماری را عوض کنید.
          NGROK_ZIP="ngrok.zip"
          curl -sSLo $NGROK_ZIP "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
          unzip -q $NGROK_ZIP -d ./ngrok
          chmod +x ./ngrok/ngrok
          ./ngrok/ngrok version

      - name: Run OpenBullet2 (background)
        working-directory: ${{ env.SOLUTION_PATH }}
        env:
          ASPNETCORE_URLS: "http://0.0.0.0:${{ env.APP_PORT }}"
          DOTNET_ENVIRONMENT: Development
        run: |
          # اجرا به صورت پس‌زمینه تا بتوانیم ngrok را بالا بیاوریم
          dotnet run --configuration Release --no-build --urls "http://0.0.0.0:${{ env.APP_PORT }}" &
          echo "dotnet started"
          # کمی صبر تا اپ آماده شود
          sleep 6

      - name: Start ngrok and fetch public URL
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_TOKEN }}
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            echo "ERROR: Please set the NGROK_TOKEN secret in this repository."
            exit 1
          fi

          # آغاز тоннل و لاگ گرفتن
          ./ngrok/ngrok authtoken "$NGROK_AUTHTOKEN" || true
          ./ngrok/ngrok http $APP_PORT --log=stdout > ngrok.log 2>&1 &

          # صبر برای بالا آمدن ngrok
          for i in {1..15}; do
            if curl -s "http://127.0.0.1:4040/api/tunnels" | grep -q "public_url"; then
              break
            fi
            sleep 1
          done

          # خواندن URL از API محلی ngrok
          NGROK_URL=$(curl -s "http://127.0.0.1:4040/api/tunnels" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['tunnels'][0]['public_url'] if data.get('tunnels') else '')")

          if [ -z "$NGROK_URL" ]; then
            echo "Failed to get ngrok URL. See ngrok.log for details."
            tail -n +1 ngrok.log
            exit 1
          fi

          echo "NGROK_URL=$NGROK_URL"
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_OUTPUT
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV

      - name: Show ngrok log tail
        if: always()
        run: |
          echo "--- ngrok log (tail) ---"
          tail -n 200 ngrok.log || true

      - name: Post a summary
        if: always()
        run: |
          echo "OpenBullet2 should now be reachable via: $NGROK_URL"

# توضیحات:
# - این ورکفلو هنگام push به شاخه main یا با اجرای دستی (workflow_dispatch) اجرا می‌شود.
# - برای کارکرد ngrok باید در Settings -> Secrets یک secret به نام NGROK_TOKEN بسازید و مقدار توکن ngrok را در آن قرار دهید.
# - در صورت نیاز مسیر SOLUTION_PATH را به پوشه‌ای که فایل .sln یا پروژه OpenBullet2 در آن قرار دارد تغییر دهید.
# - اگر نسخه دات‌نت پروژه‌ی شما 7 یا 6 است، مقدار DOTNET_VERSION را تغییر دهید (مثلاً '7.0' یا '6.0').
# - این یک نمونه پایه است؛ در صورت نیاز می‌توانم آن را گسترش دهم تا unit test، packaging، یا ساخت docker image نیز انجام شود.
