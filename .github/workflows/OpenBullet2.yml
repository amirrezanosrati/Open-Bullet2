name: Build and Expose OpenBullet2 (ngrok)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-expose:
    runs-on: ubuntu-latest

    env:
      DOTNET_VERSION: '8.0' # قابل تغییر به 7.0 یا 6.0
      APP_PORT: '5000'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Locate solution or project file
        id: locate
        run: |
          echo "Searching for .sln (maxdepth 3)..."
          SOLUTION_FILE=$(find . -maxdepth 3 -type f -name '*.sln' | head -n 1 || true)
          if [ -n "$SOLUTION_FILE" ]; then
            echo "Found solution: $SOLUTION_FILE"
            echo "SOLUTION_FILE=$SOLUTION_FILE" >> $GITHUB_ENV
            echo "SOLUTION_DIR=$(dirname \"$SOLUTION_FILE\")" >> $GITHUB_ENV
          else
            echo "No .sln found, searching for a csproj (maxdepth 4)..."
            PROJECT_FILE=$(find . -maxdepth 4 -type f -name '*.csproj' | head -n 1 || true)
            if [ -n "$PROJECT_FILE" ]; then
              echo "Found project: $PROJECT_FILE"
              echo "PROJECT_FILE=$PROJECT_FILE" >> $GITHUB_ENV
              echo "PROJECT_DIR=$(dirname \"$PROJECT_FILE\")" >> $GITHUB_ENV
            else
              echo "ERROR: No .sln or .csproj file found in the repository."
              echo "Repository contents:" && ls -la || true
              exit 1
            fi
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: |
          if [ -n "$SOLUTION_FILE" ]; then
            echo "Restoring solution: $SOLUTION_FILE"
            dotnet restore "$SOLUTION_FILE" --verbosity minimal
          else
            echo "Restoring project: $PROJECT_FILE"
            dotnet restore "$PROJECT_FILE" --verbosity minimal
          fi

      - name: Build
        run: |
          if [ -n "$SOLUTION_FILE" ]; then
            dotnet build "$SOLUTION_FILE" --configuration Release --no-restore
          else
            dotnet build "$PROJECT_FILE" --configuration Release --no-restore
          fi

      - name: Download ngrok
        run: |
          NGROK_ZIP="ngrok.zip"
          curl -sSLo $NGROK_ZIP "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
          unzip -q $NGROK_ZIP -d ./ngrok
          chmod +x ./ngrok/ngrok
          ./ngrok/ngrok version

      - name: Determine runnable project
        id: chooseproj
        run: |
          # اگر قبلاً PROJECT_FILE پیدا شده باشد از آن استفاده کن
          if [ -n "$PROJECT_FILE" ]; then
            echo "Using existing PROJECT_FILE=$PROJECT_FILE"
            echo "RUN_PROJECT=$PROJECT_FILE" >> $GITHUB_ENV
            exit 0
          fi
          # اگر فقط SOLUTION_DIR موجود است، سعی کن اولین csproj را در آن پیدا کنی
          if [ -n "$SOLUTION_DIR" ]; then
            CANDIDATE=$(find "$SOLUTION_DIR" -maxdepth 4 -type f -name '*.csproj' | head -n 1 || true)
            if [ -n "$CANDIDATE" ]; then
              echo "Found candidate project under solution: $CANDIDATE"
              echo "RUN_PROJECT=$CANDIDATE" >> $GITHUB_ENV
              exit 0
            fi
          fi
          echo "ERROR: Could not determine a project to run."
          exit 1

      - name: Run OpenBullet2 (background)
        env:
          ASPNETCORE_URLS: "http://0.0.0.0:${{ env.APP_PORT }}"
          DOTNET_ENVIRONMENT: Development
        run: |
          echo "Running project: $RUN_PROJECT"
          dotnet run --project "$RUN_PROJECT" --configuration Release --no-build --urls "http://0.0.0.0:${{ env.APP_PORT }}" &
          echo "dotnet started"
          sleep 6

      - name: Start ngrok and fetch public URL
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_TOKEN }}
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            echo "ERROR: Please set the NGROK_TOKEN secret in this repository."
            exit 1
          fi

          ./ngrok/ngrok authtoken "$NGROK_AUTHTOKEN" || true
          ./ngrok/ngrok http $APP_PORT --log=stdout > ngrok.log 2>&1 &

          for i in {1..20}; do
            if curl -s "http://127.0.0.1:4040/api/tunnels" | grep -q "public_url"; then
              break
            fi
            sleep 1
          done

          NGROK_URL=$(curl -s "http://127.0.0.1:4040/api/tunnels" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['tunnels'][0]['public_url'] if data.get('tunnels') else '')")

          if [ -z "$NGROK_URL" ]; then
            echo "Failed to get ngrok URL. See ngrok.log for details."
            tail -n +1 ngrok.log
            exit 1
          fi

          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_OUTPUT
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV

      - name: Show ngrok log tail
        if: always()
        run: |
          echo "--- ngrok log (tail) ---"
          tail -n 200 ngrok.log || true

      - name: Post a summary
        if: always()
        run: |
          echo "OpenBullet2 should now be reachable via: $NGROK_URL"

# توضیحات:
# - این ورژن به‌صورت خودکار دنبال فایل .sln یا .csproj می‌گردد و از آن‌ها برای restore/build/run استفاده می‌کند.
# - اگر پروژه‌تان در زیرپوشه‌ای خاص است، نیازی به تغییر دستی ندارید مگر بخواهید مسیر را صریح کنید.
# - اگر می‌خواهید من مسیر ثابت (مثلاً "OpenBullet2/OpenBullet2.sln") قرار دهم، بگو تا ویرایش کنم.
