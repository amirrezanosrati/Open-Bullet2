name: OpenBullet2 Official Setup

on:
  workflow_dispatch:
    inputs:
      port:
        description: 'Port number'
        required: false
        default: '8080'
      admin_password:
        description: 'Admin password'
        required: false
        default: 'admin'

env:
  OB2_PORT: ${{ github.event.inputs.port }}
  OB2_ADMIN_PASSWORD: ${{ github.event.inputs.admin_password }}

jobs:
  deploy-openbullet2:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Clone OpenBullet2 repository
      run: |
        git clone https://github.com/openbullet/OpenBullet2.git
        cd OpenBullet2

    - name: Restore dependencies
      run: |
        cd OpenBullet2
        dotnet restore

    - name: Build solution
      run: |
        cd OpenBullet2
        dotnet build --configuration Release --no-restore

    - name: Publish application
      run: |
        cd OpenBullet2
        dotnet publish --configuration Release --output ./publish --no-build

    - name: Verify publish output
      run: |
        cd OpenBullet2/publish
        dir
        echo "=== Checking required files ==="
        if (Test-Path "OpenBullet2.Web.dll") { echo "‚úÖ Main DLL exists" }
        if (Test-Path "wwwroot") { 
            echo "‚úÖ wwwroot exists" 
            dir wwwroot
        }
        if (Test-Path "appsettings.json") { echo "‚úÖ Config file exists" }

    - name: Create configuration file
      run: |
        cd OpenBullet2/publish
        $ConfigContent = @"
{
  "ApplicationSettings": {
    "BaseUrl": "http://0.0.0.0:$env:OB2_PORT",
    "SecuritySettings": {
      "AdminPassword": "$env:OB2_ADMIN_PASSWORD",
      "RequireAuthentication": true
    },
    "DatabaseSettings": {
      "Type": "SQLite",
      "ConnectionString": "Data Source=openbullet.db"
    }
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
"@
        $ConfigContent | Out-File -FilePath "appsettings.Production.json" -Encoding UTF8
        echo "‚úÖ Configuration file created"

    - name: Start OpenBullet2 service
      run: |
        cd OpenBullet2/publish
        Start-Process -NoNewWindow -FilePath "dotnet" -ArgumentList "OpenBullet2.Web.dll", "--urls", "http://0.0.0.0:$env:OB2_PORT", "--environment", "Production"
        Start-Sleep -Seconds 30

    - name: Verify service is running
      run: |
        # Check if process is running
        $Process = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue
        if ($Process) {
            echo "‚úÖ OpenBullet2 process is running"
        } else {
            echo "‚ùå OpenBullet2 process not found"
            exit 1
        }

        # Test HTTP connection
        try {
            $Response = Invoke-WebRequest -Uri "http://localhost:$env:OB2_PORT" -UseBasicParsing -TimeoutSec 10
            echo "‚úÖ HTTP service is responding"
        } catch {
            echo "‚ùå HTTP service test failed: $($_.Exception.Message)"
            exit 1
        }

    - name: Setup Ngrok tunnel
      run: |
        # Download Ngrok for Windows
        Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
        Expand-Archive -Path "ngrok.zip" -DestinationPath "." -Force
        
        # Authenticate Ngrok
        .\ngrok.exe authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        
        # Start Ngrok tunnel
        Start-Process -NoNewWindow -FilePath ".\ngrok.exe" -ArgumentList "http", "$env:OB2_PORT"
        Start-Sleep -Seconds 20

    - name: Get Ngrok public URL
      run: |
        $MaxRetries = 10
        $PublicUrl = $null
        
        for ($i = 1; $i -le $MaxRetries; $i++) {
            Write-Host "Attempt $i/$MaxRetries to get Ngrok URL..."
            
            try {
                $TunnelInfo = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -TimeoutSec 5
                $PublicUrl = $TunnelInfo.tunnels[0].public_url
                
                if ($PublicUrl) {
                    Write-Host "‚úÖ Ngrok URL found: $PublicUrl"
                    break
                }
            } catch {
                Write-Host "Attempt $i failed, retrying..."
            }
            
            Start-Sleep -Seconds 3
        }
        
        if (-not $PublicUrl) {
            # Fallback: Check Ngrok log
            Write-Host "Checking Ngrok log for URL..."
            $NgrokLog = Get-Content "ngrok.log" -ErrorAction SilentlyContinue
            if ($NgrokLog -match "url=(https://[^\s]+)") {
                $PublicUrl = $Matches[1]
                Write-Host "‚úÖ URL found in log: $PublicUrl"
            } else {
                $PublicUrl = "https://ob2.ngrok.io"
                Write-Host "‚ö†Ô∏è Using fallback URL: $PublicUrl"
            }
        }
        
        echo "PUBLIC_URL=$PublicUrl" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Display access information
      run: |
        Write-Host ""
        Write-Host "========================================"
        Write-Host "üéâ OPENBULLET 2 - OFFICIAL SETUP"
        Write-Host "========================================"
        Write-Host "üåê Public URL: $env:PUBLIC_URL"
        Write-Host "üîß Port: $env:OB2_PORT"
        Write-Host "üë§ Admin Username: admin"
        Write-Host "üîê Admin Password: $env:OB2_ADMIN_PASSWORD"
        Write-Host ""
        Write-Host "üìã Quick Access Links:"
        Write-Host "   ‚Ä¢ Main Interface: $env:PUBLIC_URL"
        Write-Host "   ‚Ä¢ Configs: $env:PUBLIC_URL/configs"
        Write-Host "   ‚Ä¢ Jobs: $env:PUBLIC_URL/jobs"
        Write-Host "   ‚Ä¢ Proxies: $env:PUBLIC_URL/proxies"
        Write-Host "   ‚Ä¢ Wordlists: $env:PUBLIC_URL/wordlists"
        Write-Host ""
        Write-Host "‚ö° Status:"
        Write-Host "   ‚Ä¢ Application: ‚úÖ Running"
        Write-Host "   ‚Ä¢ Ngrok Tunnel: ‚úÖ Active"
        Write-Host "   ‚Ä¢ Platform: Windows"
        Write-Host ""
        Write-Host "‚è∞ Duration: 6 hours"
        Write-Host "========================================"
        Write-Host ""

    - name: Continuous health monitoring
      run: |
        $Counter = 0
        $MaxDuration = 360  # 6 hours in minutes
        
        while ($Counter -lt $MaxDuration) {
            # Check application health every 5 minutes
            if ($Counter % 5 -eq 0) {
                try {
                    $Response = Invoke-WebRequest -Uri "http://localhost:$env:OB2_PORT" -UseBasicParsing -TimeoutSec 5
                    Write-Host "‚úÖ Health check passed - $Counter minutes elapsed"
                } catch {
                    Write-Host "‚ùå Health check failed, attempting restart..."
                    
                    # Kill existing process
                    Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | Stop-Process -Force
                    Start-Sleep -Seconds 5
                    
                    # Restart application
                    cd OpenBullet2/publish
                    Start-Process -NoNewWindow -FilePath "dotnet" -ArgumentList "OpenBullet2.Web.dll", "--urls", "http://0.0.0.0:$env:OB2_PORT", "--environment", "Production"
                    Start-Sleep -Seconds 30
                }
            }
            
            Start-Sleep -Seconds 60
            $Counter++
        }

    - name: Cleanup resources
      if: always()
      run: |
        Write-Host "üßπ Cleaning up resources..."
        Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | Stop-Process -Force
        Get-Process -Name "ngrok" -ErrorAction SilentlyContinue | Stop-Process -Force
        Write-Host "‚úÖ Cleanup completed"
